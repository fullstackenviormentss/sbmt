#!/usr/bin/env python

import sys

def wb_prob(n,c,count,bkf,m):
    p = float(count) / float(n + m*c)
    bkfwt = float(m*c) / float(n + m*c)
    return p + bkfwt * bkf

def unflatten_pairs(lst):
    x = 0
    p = ''
    for n in lst:
        x += 1
        if x % 2 == 0:
            yield p,float(n)
        else:
            p = n

def ntcounts(ntfile):
    tbl = {}
    for line in ntfile:
        d = {}
        v = line.strip().split()
        nt = v[0]
        n = int(v[1])
        c = int(v[2])
        for k,v in unflatten_pairs(v[3:]):
            d[k] = int(v)
        tbl[nt] = (n,d)
    return tbl
    
def counts(ntc):
    tbl = {}
    n = 0
    for nt,(n,d) in ntc.iteritems():
        n += n
        for w,nn in d.iteritems():
            tbl.setdefault(w,0)
            tbl[w] += nn
    return n,tbl

ntc = ntcounts(open(sys.argv[1]))
mult = float(sys.argv[2])

bn,tc = counts(ntc)

bc = len(tc)

bbp = 1.0/float(bc + 1)

for nt,(n,d) in ntc.iteritems():
    sd = {}
    c = len(ntc)
    for w,count in d.iteritems():
        bcount = tc[w]
        sd[w] = wb_prob(n,c,count,wb_prob(bn,bc,bcount,bbp,mult),mult)
    for w,bcount in tc.iteritems():
        if w not in sd:
            sd[w] = wb_prob(n,c,0,wb_prob(bn,bc,bcount,bbp,mult),mult)
    sys.stdout.write('%s\t%s' % (nt,len(sd)))
    for w,p in sd.iteritems():
        sys.stdout.write(' %s %s' % (w,p))
    sys.stdout.write('\n')




        
        