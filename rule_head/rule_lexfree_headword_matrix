#!/usr/bin/env python

import numpy, sys, rule_head

d = {}
dinv = {}
n = -1
def id(s):
    global d
    global n
    if s in d:
        return d[s]
    else:
        n += 1
        d[s] = n
        dinv[n] = s
        return n
m = {}
for line in open(sys.argv[1]):
    v = line.strip().split()
    y = id(v[0])
    for x,f in ((id(nt),float(fstr)) for nt,fstr in rule_head.unflatten_pairs(v[1:])):
        m[(x,y)] = f

ra = []
for y in xrange(n+1):
    row = []
    for x in xrange(n+1):
        row.append(m.get((x,y),0.0))
    ra.append(row)

mat = numpy.matrix(ra)
ident = numpy.matrix(numpy.identity(n+1))

transform = numpy.linalg.inv(ident - mat)

numpy.set_printoptions(threshold=n+1,edgeitems=n+1)
print >> sys.stderr, transform

for line in sys.stdin:
    rp = [0.0 for x in xrange(n+1)]
    mp = {}
    v = line.strip().split()
    word = v[0]
    for nt,fstr in rule_head.unflatten_pairs(v[1:]):
        if nt in d:
            rp[d[nt]] = float(fstr)
        else:
            mp[nt] = float(fstr)
    vp = numpy.matrix(rp).transpose()
    p = transform * vp
    for x in xrange(n+1):
        if p[x,0] > 0.0:
            mp[dinv[x]] = p[x,0]
    for nt,f in mp.iteritems():
        print '%s\t%s\t%s' % (nt,word,f)
        
    