#!/usr/bin/env python

import sys, itertools, optparse

# reduce-input:  nt\tid\theadword\tcount


def map_input(input):
    for line in input:
        v = line.strip().split('\t')
        nt = v[2].strip()
        id = v[1].strip()
        dist = v[4].strip().split()[1:]
        for w,n in unflatten_pairs(dist):
            yield nt,id,w,n

def reduce_input(inp):
    for line in inp:
        nt,h,id,c = line.split()
        yield nt,h,id,int(c)

def reducer(inp):
    for nt,sub in itertools.groupby(reduce_input(inp),lambda x : x[0]):
        dist = {}
        for head,subsub in itertools.groupby(sub,lambda x : x[1]):
            c = 0
            n = 0
            for x in subsub:
                c += 1
                n += x[3]
            dist[head] = (c,n)
        yield nt,dist

def reduce(inp,outp):
    for nt,dist in reducer(inp):
        outp.write('%s\t%s' % (nt,len(dist)))
        for h,cn in dist.iteritems():
            outp.write(' %s %s %s' % (h,cn[0],cn[1]))
        outp.write('\n')
        
def map(inp,outp):
    for p in map_input(inp):
        print >> outp, '\t'.join(p)

parser = optparse.OptionParser()
parser.add_option('-r','--reduce', dest='mapper', action='store_false', default=True)

if __name__ == '__main__':
    opts,_ = parser.parse_args()
    if opts.mapper:
        map(sys.stdin,sys.stdout)
    else:
        reduce(sys.stdin,sys.stdout)


