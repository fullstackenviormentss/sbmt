#!/usr/bin/env python

import sys, itertools, optparse, rule_head

# reduce-input:  nt\tid\theadword\tcount

def unflatten_pairs(lst):
    x = 0
    p = ''
    for n in lst:
        x += 1
        if x % 2 == 0:
            yield p,int(n)
        else:
            p = n

def map_input(input):
    for line in input:
        tbl = rule_head.hw_table(line)
        nt = tbl.lhs_root
        id = tbl.rule
        if tbl.hwpos.is_lex:
            yield nt,tbl.hwpos.word,id,tbl.count
        else:
            for w,n in tbl.hwpos.distribution.iterpairs():
                yield nt,w,id,n

def reduce_input(inp):
    for line in inp:
        nt,h,id,c = line.split()
        yield nt,h,id,int(c)

def reducer(inp):
    for nt,sub in itertools.groupby(reduce_input(inp),lambda x : x[0]):
        dist = {}
        for head,subsub in itertools.groupby(sub,lambda x : x[1]):
            c = 0
            n = 0
            for x in subsub:
                c += 1
                n += x[3]
            dist[head] = (c,n)
        yield nt,dist

def reduce(inp,outp):
    for nt,dist in reducer(inp):
        outp.write('%s\t%s' % (nt,len(dist)))
        for h,cn in dist.iteritems():
            outp.write(' %s %s %s' % (h,cn[0],cn[1]))
        outp.write('\n')
        
def map(inp,outp):
    for p in map_input(inp):
        print >> outp, '\t'.join(str(pp) for pp in p)

parser = optparse.OptionParser()
parser.add_option('-r','--reduce', dest='mapper', action='store_false', default=True)

if __name__ == '__main__':
    opts,_ = parser.parse_args()
    if opts.mapper:
        map(sys.stdin,sys.stdout)
    else:
        reduce(sys.stdin,sys.stdout)

        
