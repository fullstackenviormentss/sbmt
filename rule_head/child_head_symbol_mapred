#!/usr/bin/env python

# mapper: remove head word from sym, head count
# reducer: sum per symbol

import sys, itertools, argparse



def keyval(input):
    for line in input:
        line = line.strip()
        yield line.split('\t')

def reducer(input, output):
    # split on symbol
    for keylen, records in itertools.groupby(keyval(input), lambda x: x[:1]):
        sum = reduce(lambda x, y: x+int(y[1]), records, 0)
        output.write('\t'.join(keylen+[str(sum),])+"\n")

def mapper(input, output):
    # symbol in first field, count in last
    for record in keyval(input):
        output.write('\t'.join((record[0], record[-1]))+"\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="calculate symbol distro from symbol, head, count. mapper removes head, reducer sums")
    parser.add_argument("--infile", "-i", nargs='?', type=argparse.FileType('r'), default=sys.stdin, help="input file")
    parser.add_argument("--outfile", "-o", nargs='?', type=argparse.FileType('w'), default=sys.stdout, help="output file")
    parser.add_argument("--reduce", "-r", dest='mapper', action='store_false', default=True, help="reduce mode (otherwise, map mode)")
    try:
        args = parser.parse_args()
    except IOError, msg:
        parser.error(str(msg))
    mapper(args.infile, args.outfile) if args.mapper else reducer(args.infile, args.outfile)


