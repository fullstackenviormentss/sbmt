#!/usr/bin/env python
import sys, itertools, collections
import getopt

output_lambdas = False
opts, args = getopt.getopt(sys.argv[1:], "l")
for o, a in opts:
    if o == "-l":
        output_lambdas = True
def div(c,s):
    if s == 0 or c == 0:
        return 0
    else:
        return c/s
def input():
    """Present input stream as iterator over tuples"""
    for line in sys.stdin:
        key,value,counts = line.rstrip().split("\t")
        counts = [ float(c) for c in counts.split() ]
        yield key,value,counts
for key, records in itertools.groupby(input(), lambda record: record[0]):
    # records is an iterator over all records with the same key
    count = {}
    sumcount = []
    
    for _,value,cs in records:
        if value in count:
            for x in xrange(len(cs)):
                count[value][x] += cs[x]
        else:
            count[value] = cs[:]
        if len(sumcount):
            for x in xrange(len(cs)):
                sumcount[x] += cs[x]
        else:
            sumcount = cs[:]

    for value, cs in count.iteritems():
        print "%s\t%s\t%s" % (key, value, ' '.join(str(div(c,s)) for (c,s) in itertools.izip(cs,sumcount)))

    if output_lambdas:
        # Witten-Bell smoothing
        print "%s\t*lambda*\t%s" % (key, ' '.join( str(div(sc,(sc+len(count)))) for sc in sumcount))
