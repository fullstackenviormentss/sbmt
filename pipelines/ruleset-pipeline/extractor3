#!/usr/bin/env python

import argparse
import cfg
import sys
import subprocess
import itertools
import os

def get_args(opts):
    args = '-x - -t radu-new '
    args += opts['option-string']
    args += ' -l %s:%s' % (opts['node-limit'],opts['compose-limit'])
    args += ' -G - -g %s' % opts['wsd-size']
    return args

def subcorpora_extract(inp,config):
    lc = 0
    root = os.path.abspath(os.path.dirname(__file__))
    
    nbcat = os.path.join(config['variables']['rhbin'], 'nbcat') + ' 0'
    lcrepair = os.path.join(config['variables']['rhsdir'], 'lcrepair')
    ext = config['rule-extraction']['extractor']
    opts = config['rule-extraction']['extraction-options']
    if 'subcorpora' in opts:
        for k,v in opts['subcorpora'].iteritems():
            opts['subcorpora'][k] = cfg.merge_configs(v,opts)
    for sc,data in itertools.groupby(inp, lambda x : x[-1]):
        args = get_args(opts['subcorpora'][sc])
        extractor = subprocess.Popen( nbcat +' | '+ ext +' '+ args +' | '+ lcrepair +' '+ str(lc)
                                    , stdin=subprocess.PIPE
                                    , stdout=sys.stdout
                                    , stderr=open('/dev/null')
                                    , shell=True )
        for d in data:
            lc += 1
            for n in xrange(1,4):
                print >> extractor.stdin, d[n].rstrip()
        extractor.stdin.close()
        extractor.wait()

def uniform_extract(inp,config):
    root = os.path.abspath(os.path.dirname(__file__))
    nbcat = os.path.join(config['variables']['rhbin'],'nbcat')
    ext = config['rule-extraction']['extractor']
    opts = config['rule-extraction']['extraction-options']
    args = get_args(opts)
    fcmd = nbcat +' | ('+ ext +' '+ args + ' 2> /dev/null) '
    print >> sys.stderr, fcmd
    extractor = subprocess.Popen( fcmd
                                , stdin=subprocess.PIPE
                                , stdout=sys.stdout
                                , shell=True )
    for data in inp:
        for n in xrange(1,4):
            print >> extractor.stdin, data[n].rstrip()
    extractor.stdin.close()
    extractor.wait()
    

parser = argparse.ArgumentParser()
parser.add_argument('-s',dest='subcorpora',action='store_true')
parser.add_argument('-c',dest='config',default='',nargs='?')

d = parser.parse_args()
config = cfg.load_config(d.config)
gen = (d.rstrip('\n').split('\t') for d in sys.stdin)
if d.subcorpora:
    subcorpora_extract(gen,config)
else:
    uniform_extract(gen,config)
