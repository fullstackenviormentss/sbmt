#!/usr/bin/env python

import itertools
import collections
import cfg
import argparse
import sys
import os.path
import re

needsplit = re.compile(r'-\d+')

def mapper(inp):
    def input(inp):
        for line in inp:
            yield line.strip().split('\t')[1]
    mp = collections.defaultdict(int)
    for estr in input(inp):
        for m in re.finditer(r'(?: |^)\(([^() ~]+)(?: |~\d+~\d+ )',estr):
            nt = m.group(1)
            mm = needsplit.search(nt)
            if mm:
                ntun = needsplit.sub('',nt)
                print '%s\t%s' % (ntun,nt)

def reducer(inp):
    def input(inp):
        for line in inp:
            yield line.strip().split('\t')
    for k,lst in itertools.groupby(input(inp), lambda x : x[0]):
        s = set()
        for _,n in lst:
            s.add(n)
        print k + ' ' + ' '.join(x for x in s)
        
parser = argparse.ArgumentParser()
parser.add_argument('step',choices=['mapper','reducer'],nargs='?')
args = cfg.parse_args(parser)

hp = args.hadoop

def make():
    executable = os.path.abspath(sys.argv[0])
    hp.mapreduce( mapper=executable + ' mapper'
                , reducer=executable + ' reducer'
                , input='training'
                , output='grammar.nt-split'
                , compress=False )

if args.step:
    if args.step == 'mapper':
        mapper(sys.stdin)
    elif args.step == 'reducer':
        reducer(sys.stdin)
else:
    make()
