#!/usr/bin/env python

import sys
import re
import itertools
import optparse
import ptree
import collections
import pickle

# Input: eparse \t fparse \t align
# eparse is in Radu format
# fparse is in PTB format
# align is in e-f format

# Output: xRS rules

def crosses(s1,s2):
    if (s1[0] < s2[0]) and (s2[0] < s1[1]) and (s1[1] < s2[1]):
        return True
    if (s2[0] < s1[0]) and (s1[0] < s2[1]) and (s2[1] < s1[1]):
        return True
    return False

def data(lines):
    for line in lines:
        yield line.strip().split('\t')

if __name__ == "__main__":
    auxmap = pickle.load(open(sys.argv[1]))
    lookoutlabels = set(' '.join(sys.argv[2:]).split())
    for key,records in itertools.groupby(data(sys.stdin), lambda x : x[:4] + [x[auxmap['weak-source-syntax']]]):
        tid, etree, fstr, align, ftree = key
        ftree = ptree.Node.from_str(ftree)

        if not ftree:
            sys.stderr.write("warning: skipping line due to failed French parse\n")
            continue

        if ftree.label in ['', 'ROOT', 'TOP']:
            ftree = ftree.children[0]
            ftree.detach()
        
        fwords = " ".join(leaf.label for leaf in ftree.frontier())


        labelspans = collections.defaultdict(list)
        j = 0
        for node in ftree.postorder():
            if node.is_terminal():
                node.span = (j,j+1)
                j += 1
            else:
                node.span = (node.children[0].span[0], node.children[-1].span[1])
                if node.label in lookoutlabels:
                    labelspans[node.label].append(node.span)
        n = j

        frhs_re = re.compile(r"-> (.*) ###")
        srcb_re = re.compile(r" srcb={{{ (.*?) }}}")
        span_re = re.compile(r"\[(\d+),(\d+)\]")
        eroot_re = re.compile(r"^(.*?)\(")
        lineNumber_re = re.compile(r" lineNumber=(\d+)")
        var_re = re.compile(r"x\d+$")
        
        rules = [ x[-1].strip() for x in records ]

        for line in rules:
            if line == "": continue
            try:
                frhs = frhs_re.search(line).group(1).split() # assume no spaces in tokens!
                srcb = [(int(i),int(j)) for (i,j) in span_re.findall(srcb_re.search(line).group(1))]
                lineNumber = int(lineNumber_re.search(line).group(1))-1
                eroot = eroot_re.search(line).group(1)
            except:
                sys.stderr.write("couldn't process rule: %s\n" % line)
                print "%s\t%s" % (tid,line)
                raise

            matches = []
            froot = (srcb[0][0],srcb[-1][1])
            for label, spans in labelspans.iteritems():
                for span in spans:
                    if crosses(froot,span):
                        matches.append('%s-cross' % label)
                    if froot == span:
                        matches.append('%s-match' % label)

            print "%s weaksyn={{{%s}}}" % (line, ' '.join(matches))
