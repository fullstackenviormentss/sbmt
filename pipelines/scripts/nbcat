#!/usr/bin/env python

import sys, threading, Queue, select, os

# non-blocking cat.  in particular, it will not let outputing a line of data
# prevent reading a line of data to occur.


class reader(threading.Thread):
    def __init__(self,q):
        threading.Thread.__init__(self)
        self.queue = q
    def run(self):  
        for line in sys.stdin:
            self.queue.put(line,block=True,timeout=None)
        self.queue.put('',block=True,timeout=None)
        print >> sys.stderr, 'all read'
        sys.stdin.close()
        assert(sys.stdin.closed)

class writer(threading.Thread):
    #print >> sys.stderr, '#', select.PIPE_BUF
    def __init__(self,q):
        threading.Thread.__init__(self)
        self.queue = q
    def run(self):
        while True:
            try:
                line = self.queue.get(block=True,timeout=None)
                if line == '':
                    break
                sys.stdout.write(line)
            except IOError:
                print >> sys.stderr, 'did not write:',line
                raise
                        
        sys.stdout.close()
        assert(sys.stdout.closed)

if len(sys.argv) > 1
buffer = Queue.Queue()
read = reader(buffer)
write = writer(buffer)

read.start()
write.start()
read.join()
write.join()