#!/usr/bin/env python
import argparse
import os.path
import cfg
import sys
import subprocess
import tempfile
import string
import re

parser = argparse.ArgumentParser()
parser.add_argument('rules')
args = cfg.parse_args(parser,sys.argv[1:])
steps = cfg.steps(args)

extras = []
for step in steps:
    if step.stage == 'inline-extras':
        extrascmd = step.execute
        print >> sys.stderr, 'extras from:', extrascmd
        extra = subprocess.Popen( extrascmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True )
        extras.append(extra)

unkwords = subprocess.Popen( '%s/xrsdb_unknown_filter %s/xsearchdb' % (args.config['variables']['rhbin'], args.rules)
                           , stdin=subprocess.PIPE
                           , stdout=subprocess.PIPE
                           , shell=True )

lattice = subprocess.Popen( args.config['decoder']['lattice-command']
                          , stdin=subprocess.PIPE
                          , stdout=subprocess.PIPE
                          , shell=True )

segmenter = subprocess.Popen( '%s/scripts/last_resort_segment %s' % (args.rootdir,args.config['decoder']['max-sentence-length'])
                            , stdin=subprocess.PIPE
                            , stdout=subprocess.PIPE
                            , shell=True )

def allextras(line):
    extrasfile = tempfile.NamedTemporaryFile(delete=False)
    for extra in extras:
        extra.stdin.write(line + '\n')
        while True:
            outline = extra.stdout.readline().strip()
            if outline == '':
                break
            extrasfile.write(outline + '\n')
    extrasfile.close()
    unkwords.stdin.write(line + '\n')
    candunks = unkwords.stdout.readline().strip()
    if 'unknown-cmd' in args.config['rule-extraction']:
        unkrulecmd = args.config['rule-extraction']['unknown-cmd'] % extrasfile.name
    else:
        unkrulecmd = os.path.join(args.config['variables']['rhbin'],'unknown_word_rules') + ' -c 1 --id-origin 600000000000 --unk-tag-file %s/grammar.unk-tags --xrs-rule-format --native-unk \'""UNK_F_HERE""\' -f- -r %s | %s/new_decoder_weight_format' % (args.rules,extrasfile.name,args.config['variables']['rhbin'])
    unkrule = subprocess.Popen( unkrulecmd
                              , stdin=subprocess.PIPE
                              , stdout=subprocess.PIPE
                              , stderr=subprocess.PIPE
                              , shell=True )
    unkrule.stdin.write(candunks + '\n')
    unkrule.stdin.close()
    while True:
        outline = unkrule.stdout.readline().strip()
        if outline == '':
            break
        yield outline
    unkrule.wait()
    os.unlink(extrasfile.name)

latid = re.compile(r'lattice\s+id="\S+"')

def latlines(line,lineno):
    segmenter.stdin.write(line + '\n')
    seg = ''
    while True:
        seg = segmenter.stdout.readline().strip()
        if seg == '':
            break
        lattice.stdin.write('<foreign-sentence> %s </foreign-sentence>\n' % seg)
        yield latid.sub('lattice id="%s"' % lineno, lattice.stdout.readline().strip())

def mainrun():
    lineno = 0
    while True:
        line = sys.stdin.readline()
        if line == '':
            break
        lineno += 1
        vline = line.split('\t')
        if len(vline) > 1:
            lineno = int(vline[0])
            line = '\t'.join(vline[1:])
        line = line.strip()
        if line == '':
            continue
        allrules = allextras(line)
        sys.stdout.write('push-inline-rules\n')
        for rule in allrules:
            sys.stdout.write(rule + '\n')
        sys.stdout.write(';\n')
        for lat in latlines(line,lineno):
            sys.stdout.write(lat + '\n')
        sys.stdout.write('pop-grammar ;\n\n')
        sys.stdout.flush()

mainrun()
