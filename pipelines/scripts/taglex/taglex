#!/usr/bin/env python

import sys, math
import collections
import getopt

inverse = False
opts, args = getopt.getopt(sys.argv[1:], "i")
for o, a in opts:
    if o == "-i":
        inverse = True

filename, feat = args
"""
expect this input:
id \t source-string \t target-string \t align
alignment is source_word-target_word
"""

def surface(s):
    if s[0] == '"':
        return s[1:-1]
    else:
        return False

def input():
    for line in sys.stdin:
        id,fstr,estr,astr = line.rstrip('\n').split('\t')

        align = [tuple(int(i) for i in s.split('-',1)) for s in astr.split()]
        frhs = [surface(w) for w in fstr.split()]
        erhs = [surface(w) for w in estr.split()]
        
        if inverse:
            frhs, erhs = erhs, frhs
            align = [(ei, fi) for (fi, ei) in align]
        
        ealign = [[] for ei in xrange(len(erhs))]
        for fi,ei in align:
            ealign[ei].append(frhs[fi])

        yield id, erhs, ealign


tags = set()
ttable = collections.defaultdict(float)
for line in file(filename):
    (tag, f, e, p) = line.split()
    if tag != "*":
        tags.add(tag)
    ttable[tag,f,e] = float(p)

def compute(tag, erhs, ealign):
    p = 1.
    for ei,e in enumerate(erhs):
        if not e: continue
        #if isinstance(e, simplerule.Nonterminal):
        #    continue
        if len(ealign[ei]) == 0:
            fs = ["NULL"]
        else:
            fs = ealign[ei]
        s = 0.
        for f in fs:
            if (tag,f,"*lambda*") not in ttable:
                s += ttable["*",f,e]
            else:
                lam = ttable[tag,f,"*lambda*"]
                s += lam*ttable[tag,f,e] + (1-lam)*ttable["*",f,e]
        s /= len(fs)
        if s == 0.:
            #sys.stderr.write("failed to look up probability for %s\n" % e)
            s = 1e-9
        p *= s
    return p
    
for id, erhs, ealign in input():
    v = {} #svector.Vector()
    p_backoff = compute("*", erhs, ealign)
    try:
        v[feat] = -math.log10(p_backoff)
    except:
        sys.stderr.write("couldn't compute lexical features for rule %s (p=%s), dropping\n" % (rulestr, p_backoff))
        continue
        
    for tag in tags:
        p = compute(tag, erhs, ealign)
        r = p/p_backoff
        if r <= 0.5 or r >= 2.:
            v["%s_%s" % (feat, tag)] = -math.log10(r)

    # save space
    vstr = " ".join("%s=%.2f" % (x,y) for (x,y) in v.iteritems())

    print "%s\t%s" % (id, vstr)

