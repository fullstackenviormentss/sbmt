#!/usr/bin/env python
import cfg
import hadoop
import argparse
import string
import os, sys, stat
import itertools
import yaml

os.putenv('LANG','C')
os.putenv('LC_ALL','C')
os.putenv('MX_RCACHE','0')


class default_abspath(argparse.Action):
    def __call__(self,parser, namespace, values, option_string=None):

        ar = getattr(namespace,'defaults',[])
        values = os.path.abspath(values)
        setattr(namespace,self.dest,values)
        if self.dest == 'cprep':
            ar.append((1,os.path.join(values,'corpus-prep.config')))
        elif self.dest == 'tune':
            ar.append((0,os.path.join(values,'tune.config')))
        else:
            raise Exception('bad storage name')
        ar.sort()
        setattr(namespace,'default',':'.join(a[1] for a in ar))
        setattr(namespace,'defaults',ar)

class FileList(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        setattr(namespace,self.dest,' '.join(os.path.abspath(v) for v in values))

parser = argparse.ArgumentParser()
parser.add_argument( 'cprep'
                   , nargs='?'
                   , help='corpus-prep output directory'
                   , action=default_abspath
                   , default=argparse.SUPPRESS
                   )
parser.add_argument( 'tune'
                   , help='tune directory. weights assumed to be weights.final inside'
                   , action=default_abspath
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   )
parser.add_argument( '-w', '--weights'
                   , help='weights file. override weights fond in tune directory'
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   , action=cfg.store_abspath
                   )
parser.add_argument( '-T', '--tstmaster'
                   , nargs='?'
                   , default=argparse.SUPPRESS
                   , dest='tstmaster'
                   , action=cfg.store_abspath
                   )
parser.add_argument( '-e', '--lc-tok-refs'
                   , nargs='+'
                   , default=argparse.SUPPRESS
                   , dest='lctokrefs'
                   , action=FileList
                   )
parser.add_argument( '-E', '--cased-detok-refs'
                   , nargs='+'
                   , default=argparse.SUPPRESS
                   , dest='detokrefs' 
                   , action=FileList
                   )
parser.add_argument( '-v', '--visualize'
                   , help='visualize outputs'
                   , action='store_true'
                   , dest='visualize' )
d = cfg.parse_args( parser
                   , default='$default'
                   , write='$outdir/decode.config'
                   , modeldir=True )

hp = d.hadoop

logdir = os.path.join(d.outdir,'logs')
cfg.execute(d,'mkdir -p %s' % logdir)
cfg.execute(d,'ln -fs %s %s' % (os.path.join(d.config['cprep'],'corpus'), d.tmpdir))

decodefile = os.path.join(d.tmpdir,'decoder')

weights=None
if 'tune' in d.config:
    weights=os.path.join(d.config['tune'],'weights.final')
if 'weights' in d.config:
    weights=d.config['weights']

if not os.path.exists(decodefile):
    decodescript = open(decodefile,'w')
    infos = []
    print >> decodescript, '#!/usr/bin/env bash'
    print >> decodescript, 'HOST=`hostname`'
    print >> decodescript, 'LOG=%s/decode-log.$HOST-$$' % logdir
    print >> decodescript, 'cd %s' % d.tmpdir
    print >> decodescript, 'set -e'
    print >> decodescript, 'set -o pipefail'
    #print >> decodescript, 'ulimit -c unlimited'
    print >> decodescript, d.config['decoder']['exec'], '\\'
    print >> decodescript, os.path.join(d.config['rules'],'xsearchdb'), '\\'
    if weights is not None:
        print >> decodescript, '  -w %s \\' % os.path.abspath(weights) 
    print >> decodescript, ' --multi-thread  --output-format nbest \\'
    for k,v in d.config['decoder']['options'].iteritems():
        print >> decodescript,'  --%s %s \\' % (k,v)
    for step in cfg.steps(d):
        if step.stage == 'decode':
            print >> decodescript, '  %s \\' % step.options
            if step.info != '':
                infos.append(step.info)
    if len(infos) > 0:
        print >> decodescript, '  -u %s \\' % ','.join(infos)
    print >> decodescript, '  2> $LOG'
    decodescript.close()
    os.chmod(decodefile, stat.S_IRWXU | os.stat(decodefile)[stat.ST_MODE])

best1raw = os.path.join(d.outdir,'1best.raw')
best1hyp = os.path.join(d.outdir,'1best.hyp')
bestNraw = os.path.join(d.outdir,'nbest.raw')
bestNsort = os.path.join(d.outdir,'nbest.sort')
def maketemp(foo):
    return os.path.join(d.tmpdir,os.path.basename(foo))
    
def stage(foo):
    ret = os.path.join(d.outdir,os.path.basename(foo))
    cfg.execute(d,'mv ' + foo + ' ' + ret)
    return ret 

feeder = os.path.join(os.path.dirname(__file__),'scripts','feedecoder')
omitsc = os.path.join(os.path.dirname(__file__),'scripts','omitset')
if not os.path.exists(bestNraw):
    mpisize = 3
    bestNraw = maketemp(bestNraw)
    omitfile = maketemp('omitset')
    cfg.execute(d,'touch %s' % omitfile)
    if os.path.exists(bestNraw):
       cfg.execute(d,"cat %s | grep -o '^NBEST sent=[0-9]*' | sed -e 's/NBEST sent=//' | uniq > %s" % (bestNraw,omitfile))
    inputcmd = "grep -v '^#' %(cprep)s/corpus.map | %(omitsc)s %(omitfile)s | sort -nk 4 | cut -f 3 | sed -e 's|^\\(.*\\)$|%(cprep)s/\\1/decode.ins|'" % {'cprep':d.config['cprep'],'omitfile':omitfile,'omitsc':omitsc}
    pbsfile = os.getenv('PBS_NODEFILE')
    if pbsfile is not None:
        for v,line in enumerate(open(pbsfile)):
            mpisize = v + 3
        mpiscript = os.path.join(d.config['variables']['rhbin'],'mpiserv')
        mpicmd = 'mpirun --mca mpi_warn_on_fork 0 --mca btl self,tcp --oversubscribe --map-by node:PE=$(%s/numcpu) --bind-to none -x PYTHONPATH -x PATH -np %s %s "python -u %s %s"' % (d.config['variables']['rhbin'],mpisize,mpiscript,feeder,decodefile)
        cfg.execute(d,inputcmd + ' | ' + mpicmd + ' >> ' + bestNraw)
    else:
        cfg.execute(d,inputcmd + ' | python -u %s %s' % (feeder,decodefile) + ' >> ' + bestNraw)
    bestNraw = stage(bestNraw)
else: 
    print >> sys.stderr, 'decoding skipped. remove $outdir/nbest.raw to re-decode'

sortcmd="sed -e's/^NBEST sent=\\([0-9]*\\) .*$/\\1\t\\0/' < %s | sort -s -n | cut -f2 > %s" % (bestNraw,bestNsort)
if not os.path.exists(bestNsort) or not os.path.exists(best1raw):
    cfg.execute(d,sortcmd)
    cfg.execute(d,'grep "^NBEST sent=[0-9]* nbest=0" < %s > %s' % (bestNsort,best1raw))

bestNxmltmp = os.path.join(d.tmpdir,'nbesttmp.xml')
bestNxml = os.path.join(d.outdir,'nbest.xml')

if 'tstmaster' in d.config and d.config['tstmaster']:
    if not os.path.exists(bestNxml):
        sgmlize = os.path.join(d.scriptdir,'sgmlize')
        bestNxmltmp = os.path.join(d.tmpdir,'nbesttmp.xml')
        bestNxml = os.path.join(d.outdir,'nbest.xml')
        cfg.execute(d,'perl -I %s %s --no-components --weight-file %s --hyp %s --tstmaster %s > %s' % (d.scriptdir,sgmlize,weights,bestNsort,d.config['tstmaster'],bestNxmltmp))
        cfg.execute(d,'mv $xmltmp $xml',xml=bestNxml, xmltmp=bestNxmltmp)
    else:
        print >> sys.stderr, 'xml output skipped. remove $outdir/nbest.xml to re-create'

extract = os.path.join(d.scriptdir,'extract-hypothesis.pl')
if not os.path.exists(best1hyp):
    best1hyptmp = best1hyp + '.tmp'
    cfg.execute(d,extract + ' ' + best1raw + ' > ' + best1hyptmp)
    cfg.execute(d,'mv %s %s' % (best1hyptmp,best1hyp))

scoreargmap = {'decodehyp': best1hyp}

for file,cmd in d.config['decoder']['score'].iteritems():
    try:
        newcmd = string.Template(cmd).substitute(scoreargmap)
    except Exception as e:
        print >> sys.stderr, 'skipping creation of', file, 'from', '"%s"'%cmd, '(%s)'%e
        continue
    cfg.execute(d,'%s > %s' % (newcmd,os.path.join(d.outdir,file)))

if d.config['visualize']:
    minlen = d.config['visualization-options']['min-length']
    maxlen = d.config['visualization-options']['max-length']
    endsin = d.config['visualization-options']['terminal-punctuation']
    rulefields = ','.join(k for (k,v) in d.config['visualization-options']['rule-fields'].iteritems() if v)
    print >> sys.stderr, "rule-fields", d.config['visualization-options']['rule-fields']
    nbestfields = ','.join(k for (k,v) in d.config['visualization-options']['nbest-fields'].iteritems() if v)
    hp = d.hadoop
    gview = os.path.join(d.config['variables']['rhbin'],'xrsdb_search')
    hp.start(reducers=4)
    hp.put(os.path.join(d.outdir,'nbest.sort'),'nbest')
    cmd = '$reduce $latvizprep --xsearchdb $rules/xsearchdb --grammar-view $grammar_view --per-sentence $tmpdir --output $tmpdir/viz-%k.txt --index $tmpdir/viz-%k.idx --corpus-map $corpus/corpus.map'
    cmd = string.Template(cmd).safe_substitute( latvizprep=os.path.join(d.scriptdir,'lat-viz-prep')
                                              , reduce=os.path.join(d.scriptdir,'nbest_viz')
                                              , tmpdir=d.tmpdir
                                              , grammar_view=gview
                                              , rules=d.config['rules']
                                              , corpus=d.config['cprep']
                                              )
    cfg.execute(d,'rm -rf $tmpdir/viz*',tmpdir=d.tmpdir)
    hp.mapreduce( mapper=os.path.join(d.scriptdir,'nbest_map') + ' -m %d -M %d' % (minlen,maxlen)
                , reducer=cmd
                , input='nbest'
                , output='latvizprep.out'
                , sortkeys=2
                , partitionkeys=1
                , options='-jobconf mapred.reduce.tasks.speculative.execution=false -jobconf mapred.map.tasks=200 '
                )
    cmd = 'mkdir -p $tmpdir/viz/fig; cd $tmpdir/viz; /home/nlg-05/voeckler/perl/bin/perl $scriptdir/lat-viz-gen --features $weights --language $langcode --title $outdir --dataset $corpus --max-length $maxlen --min-length $minlen $endsin --rule-fields $rulefields --nbest-fields $nbestfields --rule-column-width 70 --nbest-column-width 100 --num-to-highlight 5 --nbest-max 50 $englishtoklc --no-missing-content --eps-files fig --tree 4 --output viz.tex $tmpdir/viz-*.txt'
    englishtoklc=''
    if 'lctokrefs' in d.config and d.config['lctokrefs']:
        englishtoklc=' '.join('--english %s' % lc for lc in d.config['lctokrefs'].split()) + ' --bleu-plus-one --brevity-penalty'
    endsincmd = ''
    if endsin:
        endsinpth =  os.path.join(d.tmpdir,'endsin.txt')
        endsinfile = open(endsinpth,'w')
        print >> endsinfile, '\n'.join(endsin)
        endsinfile.close()
        endsincmd = '--ends-in %s' % endsinpth
    cmd = string.Template(cmd).substitute( tmpdir=d.tmpdir
                                         , outdir=os.path.basename(d.outdir)
                                         , scriptdir=d.scriptdir
                                         , corpus=d.config['corpus']
                                         , englishtoklc=englishtoklc
                                         , langcode=d.config['source-language-code3']
                                         , endsin=endsincmd
                                         , nbestfields=nbestfields
                                         , rulefields=rulefields
                                         , maxlen=maxlen
                                         , minlen=minlen
                                         , weights=os.path.abspath(weights)
                                         )
    cfg.execute(d,cmd)
    cfg.execute(d,'ls $tmpdir/viz/fig/*/*-p > $tmpdir/viz/fignames',tmpdir=d.tmpdir)
    hp.put(os.path.join(d.tmpdir,'viz','fignames'),'fignames')
    hp.mapreduce( mapper=os.path.join(d.scriptdir,'vizfig2pdf')
                , input='fignames'
                , output='vizfig2pdf.out'
                , options='-jobconf mapred.reduce.tasks.speculative.execution=false -jobconf mapred.map.tasks=200'
                )

    cfg.execute(d,'cd $tmpdir; cp $libdir/*.{sty,tex} viz; ls viz/fig/*/*.ps; tar czvf $outdir/viz.tex.tar.gz viz',outdir=d.outdir, tmpdir=d.tmpdir,libdir=os.path.join(d.rootdir,'lib'))
    cfg.execute(d,'cd $tmpdir/viz; latex -interaction=batchmode viz.tex || test -e viz.dvi',tmpdir=d.tmpdir)
    cfg.execute(d,'cd $tmpdir/viz; dvipdf viz.dvi || test -e viz.pdf; cp viz.pdf $outdir/viz.pdf',outdir=d.outdir,tmpdir=d.tmpdir)
